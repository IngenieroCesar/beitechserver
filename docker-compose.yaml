version: '3.7'

services:
# nginx-proxy #####################
# Proxy inverso, se encarga de resivir las peticiones a los dominios asociados
# a nuestros contenedores de aplicaciones web
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
#Comunica la red del servidor, con la red interna de docker.
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx/ssl/certs:/etc/nginx/certs:ro
      - ./nginx/ssl/vhostd:/etc/nginx/vhost.d
      - ./nginx/ssl/html:/usr/share/nginx/html
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy
    networks:
      - back-network
      - front-network

# #letsencript
#Se encarega de generarnos los certificados de seguridad SSL
#Cada 60 minutos realiza una verificaci贸n de la caducidad de nuestros certificados
# de haber caducado, vuelve y hace la solicitud y los almacena en nuestro servidor.
  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt
    restart: always
    depends_on:
      - nginx-proxy
    environment:
      - NGINX_PROXY_CONTAINER=nginx-proxy-stefanini
    volumes:
      - ./nginx/ssl/certs:/etc/nginx/certs:rw
      - ./nginx/ssl/vhostd:/etc/nginx/vhost.d
      - ./nginx/ssl/html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - back-network
      - front-network

 #MySQL Service (DEV)
#  #Base de datos para desarrollo.
  mysql:
    depends_on:
      - nginx-proxy
    image: mysql:5.7.22
    container_name: mysql
    restart: always
    tty: true
    ports:
  #Tiene comunicaci贸n unicamente con la red interna de docker
      - "3306"
    environment:
      MYSQL_DATABASE: beitech
      MYSQL_ROOT_PASSWORD: your_mysql_root_password
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
      MYSQL_USER: user
      MYSQL_PASSWORD: mysql_password
    volumes:
      - ./mysql/dbdata/:/var/lib/mysql/
      - ./mysql/my.cnf/:/etc/mysql/my.cnf
    networks:
      - back-network

 #PHPMyAdmi Service (DEV)
 #Cliente para bases de datos. Desarrollo.
  phpmyadmin:
    depends_on:
      - mysql
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    environment:
      PMA_PORT: 3306
      PMA_HOST: mysql
      PMA_USER: user
      PMA_PASSWORD: mysql_password
    ports:
        - "8080:80"
    networks:
      - back-network

############## API REST LARAVEL ################

# Nginx Service
# Servidor web nginx
  webserverback:
    depends_on:
      - nginx-proxy
    image: nginx:alpine
    container_name: webserverback
    restart: unless-stopped
    tty: true
    ports:
      - "80"
      - "443"
    volumes:
     # Archivo de configuraci贸n para el servidor con PHP
      - ./nginx/sites/back.conf:/etc/nginx/conf.d/back.conf
      - ./nginx/ssl/certs/:/etc/nginx/ssl/
      - ../beitechapi/:/var/www
    environment:
     #El identificador del contenedor ante el proxy inverso.
      - VIRTUAL_HOST=back.admiapp.com
      - LETSENCRYPT_HOST=back.admiapp.com
      - LETSENCRYPT_EMAIL=cesarago852@gmail.com
    networks:
      - back-network

# PHP Service
# Contenedor con dependencias necesarias para la interpretaci贸n de PHP
# La imagen en la carpeta PHP debe ser copiada en la raiz del proyecto Laravel
  appback:
    build:
      context: ../beitechapi
      dockerfile: Dockerfile
    image: appback
    container_name: appback
    restart: unless-stopped
    depends_on:
      - webserverback
    tty: true
    working_dir: /var/www
    volumes:
      - ../beitechapi:/var/www
    networks:
      - back-network

############## END API REST LARAVEL ################
#--------------------------------------------------#
############## FRONT APP REACT #####################
  webserverfront:
    depends_on:
      - nginx-proxy
    build:
      context: ../beitechfront
      dockerfile: Dockerfile
    image: spareact
    container_name: webserverfront
    restart: unless-stopped
    tty: true
    ports:
      - "8080:80"
    volumes:
      - ./nginx/ssl/certs/:/etc/nginx/ssl/
    environment:
    #El identificador del contenedor ante el proxy inverso.
      - VIRTUAL_HOST=front.admiapp.com
      - LETSENCRYPT_HOST=front.admiapp.com
      - LETSENCRYPT_EMAIL=cesarago852@gmail.com
    networks:
      - front-network


############## END FRONT APP REACT #################

#Volumes
#Persistencia de datos de contenedores

volumes:
  webserverfront:
    driver: local
  appback:
    driver: local
  nginx-proxy:
    driver: local
  letsencript:
    driver: local

#Docker Networks
#Redes internas de docker
networks:
  back-network:
    driver: bridge
  front-network:
    driver: bridge
